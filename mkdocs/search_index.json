{
    "docs": [
        {
            "location": "/",
            "text": "smart-ac-backend\n\n\n\n\n\n\nBackend for smart air conditioners. Check out the project's \ndocumentation\n.\nDevelopers, see below.\nAdministrators check the documentation \nhere\n.\nAPI consumers go \nhere\n.\n\n\nPrerequisites\n\n\n\n\nDocker\n  \n\n\nTravis CLI\n\n\nHeroku Toolbelt\n\n\n\n\nInitialize the project\n\n\nStart the dev server for local development:\n\n\ndocker-compose up\n\n\n\n\nCreate a superuser to login to the admin:\n\n\ndocker-compose run --rm web ./manage.py createsuperuser\n\n\n\n\nContinuous Deployment\n\n\nDeployment automated via Travis. When builds pass on the master or qa branch, Travis will deploy that branch to Heroku. Enable this by:\n\n\nCreating the production sever:\n\n\nheroku create smartac-prod --remote prod && \\\n    heroku addons:create newrelic:wayne --app smartac-prod && \\\n    heroku addons:create heroku-postgresql:hobby-dev --app smartac-prod && \\\n    heroku config:set DJANGO_SECRET=`openssl rand -base64 32` \\\n        DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\\n        DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\\n        DJANGO_AWS_STORAGE_BUCKET_NAME=\"smartac-prod\" \\\n        DJANGO_CONFIGURATION=\"Production\" \\\n        DJANGO_SETTINGS_MODULE=\"smartac.config\" \\\n        DJANGO_EMAIL_HOST=\"Your smtp host\" \\\n        DJANGO_EMAIL_HOST_USER=\"Your smtp sending email\" \\\n        DJANGO_EMAIL_HOST_PASSWORD=\"Your smtp account password\" \\\n        --app smartac-prod\n\n\n\n\nCreating the qa sever:\n\n\nheroku create `smartac-qa --remote qa && \\\n    heroku addons:create heroku-postgresql:hobby-dev && \\\n    heroku config:set DJANGO_SECRET=`openssl rand -base64 32` \\\n        DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\\n        DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\\n        DJANGO_AWS_STORAGE_BUCKET_NAME=\"smartac-qa\" \\\n        DJANGO_CONFIGURATION=\"Production\" \\\n        DJANGO_SETTINGS_MODULE=\"smartac.config\" \\\n        DJANGO_EMAIL_HOST=\"Your smtp host\" \\\n        DJANGO_EMAIL_HOST_USER=\"Your smtp sending email\" \\\n        DJANGO_EMAIL_HOST_PASSWORD=\"Your smtp account password\" \\\n        --app smartac-qa\n\n\n\n\nSecurely add your heroku credentials to travis so it can automatically deploy your changes.\n\n\ntravis encrypt HEROKU_AUTH_TOKEN=\"$(heroku auth:token)\" --add\n\n\n\n\nGet your heroku API key from your account settings and use it in this command\n\n\ntravis encrypt HEROKU_API_KEY=\"<yourapikey>\" --add\n\n\n\n\nCommit your changes and push to master and qa to trigger your first deploys:\n\n\ngit commit -m \"ci(travis): added heroku credentials\" && \\\ngit push origin master && \\\ngit checkout -b qa && \\\ngit push -u origin qa\n\n\n\n\nYou're ready to continuously ship! \u2728 \ud83d\udc85 \ud83d\udef3",
            "title": "Home"
        },
        {
            "location": "/#smart-ac-backend",
            "text": "Backend for smart air conditioners. Check out the project's  documentation .\nDevelopers, see below.\nAdministrators check the documentation  here .\nAPI consumers go  here .",
            "title": "smart-ac-backend"
        },
        {
            "location": "/#prerequisites",
            "text": "Docker     Travis CLI  Heroku Toolbelt",
            "title": "Prerequisites"
        },
        {
            "location": "/#initialize-the-project",
            "text": "Start the dev server for local development:  docker-compose up  Create a superuser to login to the admin:  docker-compose run --rm web ./manage.py createsuperuser",
            "title": "Initialize the project"
        },
        {
            "location": "/#continuous-deployment",
            "text": "Deployment automated via Travis. When builds pass on the master or qa branch, Travis will deploy that branch to Heroku. Enable this by:  Creating the production sever:  heroku create smartac-prod --remote prod && \\\n    heroku addons:create newrelic:wayne --app smartac-prod && \\\n    heroku addons:create heroku-postgresql:hobby-dev --app smartac-prod && \\\n    heroku config:set DJANGO_SECRET=`openssl rand -base64 32` \\\n        DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\\n        DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\\n        DJANGO_AWS_STORAGE_BUCKET_NAME=\"smartac-prod\" \\\n        DJANGO_CONFIGURATION=\"Production\" \\\n        DJANGO_SETTINGS_MODULE=\"smartac.config\" \\\n        DJANGO_EMAIL_HOST=\"Your smtp host\" \\\n        DJANGO_EMAIL_HOST_USER=\"Your smtp sending email\" \\\n        DJANGO_EMAIL_HOST_PASSWORD=\"Your smtp account password\" \\\n        --app smartac-prod  Creating the qa sever:  heroku create `smartac-qa --remote qa && \\\n    heroku addons:create heroku-postgresql:hobby-dev && \\\n    heroku config:set DJANGO_SECRET=`openssl rand -base64 32` \\\n        DJANGO_AWS_ACCESS_KEY_ID=\"Add your id\" \\\n        DJANGO_AWS_SECRET_ACCESS_KEY=\"Add your key\" \\\n        DJANGO_AWS_STORAGE_BUCKET_NAME=\"smartac-qa\" \\\n        DJANGO_CONFIGURATION=\"Production\" \\\n        DJANGO_SETTINGS_MODULE=\"smartac.config\" \\\n        DJANGO_EMAIL_HOST=\"Your smtp host\" \\\n        DJANGO_EMAIL_HOST_USER=\"Your smtp sending email\" \\\n        DJANGO_EMAIL_HOST_PASSWORD=\"Your smtp account password\" \\\n        --app smartac-qa  Securely add your heroku credentials to travis so it can automatically deploy your changes.  travis encrypt HEROKU_AUTH_TOKEN=\"$(heroku auth:token)\" --add  Get your heroku API key from your account settings and use it in this command  travis encrypt HEROKU_API_KEY=\"<yourapikey>\" --add  Commit your changes and push to master and qa to trigger your first deploys:  git commit -m \"ci(travis): added heroku credentials\" && \\\ngit push origin master && \\\ngit checkout -b qa && \\\ngit push -u origin qa  You're ready to continuously ship! \u2728 \ud83d\udc85 \ud83d\udef3",
            "title": "Continuous Deployment"
        },
        {
            "location": "/admin/",
            "text": "Admin\n\n\nThere are two types of administrators for SmartAC backend: Superusers and Staff users. Superusers have all permissions to do everything possible in the admin interface. Staff users have the ability to view/update/create/delete devices and their related records as well as view/update/create/delete user invitations.\n\n\nInvitations\n\n\nInvite another user to the backend by going to the \"Invitations\" section of the admin and tapping the \"Add Invitation\" button. Fill out the form with the email address of the user to invite and they will receive an invitation email. Clicking the link in the invitation email will allow them to sign up for an admin account. Only those with such a link can create an account. After signup they will have all the permissions of a Staff user, and can invite other users. A superuser can find the new user in the \"Users\" section of the admin and upgrade it to a superuser if desired.\n\n\nNote to testers\n: If you open the link in a browser that is already logged in to the admin, the link will not work. It's best to open the link in an incognito window or different browser.\n\n\nUsers\n\n\nSuperusers have view/update/create/delete priveleges on any user record. They can upgrade a user to superuser status by selecting the \"Superuser status\" on the edit user form. They can deactivate or reactivate any user account by unchecking or rechecking the \"Active\" checkbox on the edit user form.\n\n\nDevices\n\n\nThe \"Devices\" section of the admin interface allows admins to view/update/create/delete device records as well as their sensor logs, status updates, and auth tokens. Select \"Devices\" to view a list of all devices. You can search for devices by serial number on this page, as well as filter to show devices that are alerting. Devices that are alerting satisfy one of the following criteria:\n\n\n\n\nThe latest carbon monoxide reading is > 9 PPM\n\n\nThe device's latest health status is one of\n\n\n\"needs_service\", \"needs_new_filter\" or \"gas_leak.\"",
            "title": "Home"
        },
        {
            "location": "/admin/#admin",
            "text": "There are two types of administrators for SmartAC backend: Superusers and Staff users. Superusers have all permissions to do everything possible in the admin interface. Staff users have the ability to view/update/create/delete devices and their related records as well as view/update/create/delete user invitations.",
            "title": "Admin"
        },
        {
            "location": "/admin/#invitations",
            "text": "Invite another user to the backend by going to the \"Invitations\" section of the admin and tapping the \"Add Invitation\" button. Fill out the form with the email address of the user to invite and they will receive an invitation email. Clicking the link in the invitation email will allow them to sign up for an admin account. Only those with such a link can create an account. After signup they will have all the permissions of a Staff user, and can invite other users. A superuser can find the new user in the \"Users\" section of the admin and upgrade it to a superuser if desired.  Note to testers : If you open the link in a browser that is already logged in to the admin, the link will not work. It's best to open the link in an incognito window or different browser.",
            "title": "Invitations"
        },
        {
            "location": "/admin/#users",
            "text": "Superusers have view/update/create/delete priveleges on any user record. They can upgrade a user to superuser status by selecting the \"Superuser status\" on the edit user form. They can deactivate or reactivate any user account by unchecking or rechecking the \"Active\" checkbox on the edit user form.",
            "title": "Users"
        },
        {
            "location": "/admin/#devices",
            "text": "The \"Devices\" section of the admin interface allows admins to view/update/create/delete device records as well as their sensor logs, status updates, and auth tokens. Select \"Devices\" to view a list of all devices. You can search for devices by serial number on this page, as well as filter to show devices that are alerting. Devices that are alerting satisfy one of the following criteria:   The latest carbon monoxide reading is > 9 PPM  The device's latest health status is one of  \"needs_service\", \"needs_new_filter\" or \"gas_leak.\"",
            "title": "Devices"
        },
        {
            "location": "/api/authentication/",
            "text": "Authentication\n\n\nFor clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example:\n\n\nAuthorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\n\n\n\n\nUnauthenticated responses that are denied permission will result in an HTTP \n401 Unauthorized\n response with an appropriate \nWWW-Authenticate\n header. For example:\n\n\nWWW-Authenticate: Token\n\n\n\n\nThe curl command line tool may be useful for testing token authenticated APIs. For example:\n\n\ncurl -X GET http://127.0.0.1:8000/api/v1/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'\n\n\n\n\nRetrieving Tokens\n\n\nAuthorization tokens are issued and returned when a device registers.",
            "title": "Authentication"
        },
        {
            "location": "/api/authentication/#authentication",
            "text": "For clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example:  Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b  Unauthenticated responses that are denied permission will result in an HTTP  401 Unauthorized  response with an appropriate  WWW-Authenticate  header. For example:  WWW-Authenticate: Token  The curl command line tool may be useful for testing token authenticated APIs. For example:  curl -X GET http://127.0.0.1:8000/api/v1/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b'",
            "title": "Authentication"
        },
        {
            "location": "/api/authentication/#retrieving-tokens",
            "text": "Authorization tokens are issued and returned when a device registers.",
            "title": "Retrieving Tokens"
        },
        {
            "location": "/api/devices/",
            "text": "Device\n\n\nSupports registering devices.\n\n\nRegister a new device\n\n\nRequest\n:\n\n\nPOST\n \n/devices/\n\n\nParameters:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nserial_number\n\n\nuuid4\n\n\nYes\n\n\nThe serial number of the device.\n\n\n\n\n\n\nfirmware_version\n\n\nchar\n\n\nYes\n\n\nThe firmware version on the device.\n\n\n\n\n\n\n\n\nNote:\n\n\n\n\nNot Authorization Protected\n\n\n\n\nExamples:\n\n\ncurl -X POST https://smartac-backend-prod.herokuapp.com/api/v1/devices/ -H \"Content-Type: application/json\" -d '{\"serial_number\":\"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\",\"firmware_version\":\"v1.0.0\"}'\n\n\n\n\nResponse\n:\n\n\nContent-Type application/json\n201 Created\n\n{\n  \"id\": 6,\n  \"serial_number\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\",\n  \"firmware_version\": \"v1.0.0\",\n  \"registered\": \"2019-06-02T00:08:09+0000\",\n  \"auth_token\": \"132cf952e0165a274bf99e115ab483671b3d9ff6\"\n}\n\n\n\n\nThe \nauth_token\n returned with this response should be stored by the client for\nauthenticating future requests to the API. See \nAuthentication\n.\n\n\nCreate a device sensor log\n\n\nRequest\n:\n\n\nPOST\n \n/sensor_logs/\n\n\nParameters:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsensor_type\n\n\nchar\n\n\nYes\n\n\nThe type of sensor data. TM = Temperature (in Celsius), HM = Air humidity percentage, CO = Carbon Monoxide level in the air (PPM)\n\n\n\n\n\n\nvalue\n\n\ndecimal\n\n\nYes\n\n\nThe value from the sensor\n\n\n\n\n\n\n\n\nFor bulk object creation, pass a list of objects with the above parameters.\n\n\nExamples:\n\n\ncurl -X POST https://smartac-backend-prod.herokuapp.com/api/v1/sensor_logs/ -H \"Content-Type: application/json\" -H 'Authorization: Token 73c8a8ad8a51ad207d10087981e882516c7dd80c' -d '{\"value\":\"12\",\"sensor_type\":\"TM\"}'\n\n\n\n\ncurl -X POST https://smartac-backend-prod.herokuapp.com/api/v1/sensor_logs/ -H \"Content-Type: application/json\" -H 'Authorization: Token 73c8a8ad8a51ad207d10087981e882516c7dd80c' -d '[{\"value\":\"13\",\"sensor_type\":\"TM\"},{\"value\":\"8\",\"sensor_type\":\"CO\"},{\"value\":\"49.67\",\"sensor_type\":\"HM\"}]'\n\n\n\n\nNote:\n\n\n\n\nAutthentication header must be specified. See \nAuthentication\n.\n\n\n\n\nResponse\n:\n\n\nContent-Type application/json\n201 Created\n\n{\n  \"sensor_type\": \"TM\",\n  \"stamp\": \"2019-06-02T06:00:53+0000\", \n  \"value\":\"12.00000\"\n}\n\n\n\n\nContent-Type application/json\n201 Created\n\n[\n  {\n    \"sensor_type\":\"TM\",\n    \"stamp\":\"2019-06-03T00:53:29+0000\",\n    \"value\":\"13.00000\"\n  },\n  {\n    \"sensor_type\":\"CO\",\n    \"stamp\":\"2019-06-03T00:53:29+0000\",\n    \"value\":\"8.00000\"\n  },\n  {\n    \"sensor_type\":\"HM\",\n    \"stamp\":\"2019-06-03T00:53:29+0000\",\n    \"value\":\"49.67000\"\n  }\n]\n\n\n\n\nCreate a device health status log\n\n\nRequest\n:\n\n\nPOST\n \n/health_status/\n\n\nParameters:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nchar\n\n\nYes\n\n\nThe health status of the device, less than 150 chars\n\n\n\n\n\n\n\n\nFor bulk object creation, pass a list of objects with the above parameters.\n\n\nExamples:\n\n\ncurl -X POST https://smartac-backend-prod.herokuapp.com/api/v1/health_status/ -H \"Content-Type: application/json\" -H 'Authorization: Token 73c8a8ad8a51ad207d10087981e882516c7dd80c' -d '{\"value\":\"needs_service\"}'\n\n\n\n\ncurl -X POST https://smartac-backend-prod.herokuapp.com/api/v1/health_status/ -H \"Content-Type: application/json\" -H 'Authorization: Token 73c8a8ad8a51ad207d10087981e882516c7dd80c' -d '[{\"value\":\"needs_repair\"},{\"value\":\"feeling_better\"}]'\n\n\n\n\nNote:\n\n\n\n\nAutthentication header must be specified. See \nAuthentication\n.\n\n\n\n\nResponses\n:\n\n\nContent-Type application/json\n201 Created\n\n{\n  \"stamp\":\"2019-06-02T06:12:02+0000\",\n  \"value\":\"needs_service\"\n}\n\n\n\n\nContent-Type application/json\n201 Created\n\n[\n  {\n    \"stamp\":\"2019-06-03T00:47:41+0000\",\n    \"value\":\"needs_repair\"\n  },\n  {\n    \"stamp\":\"2019-06-03T00:47:41+0000\",\n    \"value\":\"feeling_better\"\n  }\n]",
            "title": "Devices"
        },
        {
            "location": "/api/devices/#device",
            "text": "Supports registering devices.",
            "title": "Device"
        },
        {
            "location": "/api/devices/#register-a-new-device",
            "text": "Request :  POST   /devices/  Parameters:     Name  Type  Required  Description      serial_number  uuid4  Yes  The serial number of the device.    firmware_version  char  Yes  The firmware version on the device.     Note:   Not Authorization Protected   Examples:  curl -X POST https://smartac-backend-prod.herokuapp.com/api/v1/devices/ -H \"Content-Type: application/json\" -d '{\"serial_number\":\"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\",\"firmware_version\":\"v1.0.0\"}'  Response :  Content-Type application/json\n201 Created\n\n{\n  \"id\": 6,\n  \"serial_number\": \"6d5f9bae-a31b-4b7b-82c4-3853eda2b011\",\n  \"firmware_version\": \"v1.0.0\",\n  \"registered\": \"2019-06-02T00:08:09+0000\",\n  \"auth_token\": \"132cf952e0165a274bf99e115ab483671b3d9ff6\"\n}  The  auth_token  returned with this response should be stored by the client for\nauthenticating future requests to the API. See  Authentication .",
            "title": "Register a new device"
        },
        {
            "location": "/api/devices/#create-a-device-sensor-log",
            "text": "Request :  POST   /sensor_logs/  Parameters:     Name  Type  Required  Description      sensor_type  char  Yes  The type of sensor data. TM = Temperature (in Celsius), HM = Air humidity percentage, CO = Carbon Monoxide level in the air (PPM)    value  decimal  Yes  The value from the sensor     For bulk object creation, pass a list of objects with the above parameters.  Examples:  curl -X POST https://smartac-backend-prod.herokuapp.com/api/v1/sensor_logs/ -H \"Content-Type: application/json\" -H 'Authorization: Token 73c8a8ad8a51ad207d10087981e882516c7dd80c' -d '{\"value\":\"12\",\"sensor_type\":\"TM\"}'  curl -X POST https://smartac-backend-prod.herokuapp.com/api/v1/sensor_logs/ -H \"Content-Type: application/json\" -H 'Authorization: Token 73c8a8ad8a51ad207d10087981e882516c7dd80c' -d '[{\"value\":\"13\",\"sensor_type\":\"TM\"},{\"value\":\"8\",\"sensor_type\":\"CO\"},{\"value\":\"49.67\",\"sensor_type\":\"HM\"}]'  Note:   Autthentication header must be specified. See  Authentication .   Response :  Content-Type application/json\n201 Created\n\n{\n  \"sensor_type\": \"TM\",\n  \"stamp\": \"2019-06-02T06:00:53+0000\", \n  \"value\":\"12.00000\"\n}  Content-Type application/json\n201 Created\n\n[\n  {\n    \"sensor_type\":\"TM\",\n    \"stamp\":\"2019-06-03T00:53:29+0000\",\n    \"value\":\"13.00000\"\n  },\n  {\n    \"sensor_type\":\"CO\",\n    \"stamp\":\"2019-06-03T00:53:29+0000\",\n    \"value\":\"8.00000\"\n  },\n  {\n    \"sensor_type\":\"HM\",\n    \"stamp\":\"2019-06-03T00:53:29+0000\",\n    \"value\":\"49.67000\"\n  }\n]",
            "title": "Create a device sensor log"
        },
        {
            "location": "/api/devices/#create-a-device-health-status-log",
            "text": "Request :  POST   /health_status/  Parameters:     Name  Type  Required  Description      value  char  Yes  The health status of the device, less than 150 chars     For bulk object creation, pass a list of objects with the above parameters.  Examples:  curl -X POST https://smartac-backend-prod.herokuapp.com/api/v1/health_status/ -H \"Content-Type: application/json\" -H 'Authorization: Token 73c8a8ad8a51ad207d10087981e882516c7dd80c' -d '{\"value\":\"needs_service\"}'  curl -X POST https://smartac-backend-prod.herokuapp.com/api/v1/health_status/ -H \"Content-Type: application/json\" -H 'Authorization: Token 73c8a8ad8a51ad207d10087981e882516c7dd80c' -d '[{\"value\":\"needs_repair\"},{\"value\":\"feeling_better\"}]'  Note:   Autthentication header must be specified. See  Authentication .   Responses :  Content-Type application/json\n201 Created\n\n{\n  \"stamp\":\"2019-06-02T06:12:02+0000\",\n  \"value\":\"needs_service\"\n}  Content-Type application/json\n201 Created\n\n[\n  {\n    \"stamp\":\"2019-06-03T00:47:41+0000\",\n    \"value\":\"needs_repair\"\n  },\n  {\n    \"stamp\":\"2019-06-03T00:47:41+0000\",\n    \"value\":\"feeling_better\"\n  }\n]",
            "title": "Create a device health status log"
        }
    ]
}